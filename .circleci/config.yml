version: 2.1

executors:
  test-executor:
    machine:
      image: ubuntu-2004:202010-01
    resource_class: xlarge
  docker-executor:
    environment:
      IMAGE_NAME: chainsafe/pint
    docker:
      - image: circleci/buildpack-deps:stretch
    resource_class: xlarge

commands:
  rust_setup:
    description: Setup Rust Toolchain
    steps:
      - run:
          name: Setup Rust Toolchain
          command: |
            curl https://sh.rustup.rs -sSf | sh -s -- -y \
            --default-toolchain  nightly-2021-04-18 \
            --target wasm32-unknown-unknown \
            --component clippy rustfmt \
            --profile minimal
  install_deps:
    steps:
      - run:
          name: Substrate Build Dependencies
          command: sudo apt-get update && sudo apt-get install -y git clang curl libssl-dev
  save_cargo_package_cache:
    description: Save cargo package cache for subsequent jobs
    steps:
      - save_cache:
          key: cargo-package-cache-{{ checksum "Cargo.lock" }}
          # paths are relative to /home/circleci/project/
          paths:
            - ../.cargo/git
            - ../.cargo/registry
            - ../.cargo/.package-cache
  restore_cargo_package_cache:
    description: Restore Cargo package cache from prev job
    steps:
      - run:
          name: Print dir
          command: |
            ls -all /usr/local/include
      - restore_cache:
          key: cargo-package-cache-{{ checksum "Cargo.lock" }}
      - run:
          name: Check cargo package cache
          command: |
            ls -all $HOME/.cargo
            du -ssh $HOME/.cargo
  build_setup:
    description: Sets up environment for future jobs
    steps:
      - checkout
      - rust_setup
      - install_deps
  
jobs:
  prefetch-crates:
    executor: test-executor
    description: Prefetch cargo crates for subsequent jobs.
    steps:
      - build_setup
      - restore_cargo_package_cache
      - run:
          name: Fetch workspace dependencies over network
          command: cargo fetch
      - save_cargo_package_cache
  format:
    executor: test-executor
    description: format check
    steps:
      - checkout
      - rust_setup
      - run:
          name: Format check
          command: cargo fmt -- --check
  lint:
    executor: test-executor
    description: Lint Code
    steps:
      - build_setup
      - restore_cargo_package_cache
      - run:
          name: clippy check
          command: cargo clippy --all-targets
          no_output_timeout: 256m
  test:
    executor: test-executor
    description: Run tests
    steps:
      - build_setup
      - restore_cargo_package_cache
      - run:
          name: Run Tests
          command: cargo test --all
          no_output_timeout: 256m
  security:
    executor: test-executor
    description: Cargo audit
    steps:
      - build_setup
      - restore_cargo_package_cache
      - run:
          name: Install dependency auditing tool
          command: cargo install cargo-audit
      - run:
          name: Check for known security issues in dependencies
          command: cargo audit
  docker-build:
    executor: docker-executor
    description: Build Docker Image
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.2
          docker_layer_caching: true
      - run:
          name: Build docker image
          command: docker build -t $IMAGE_NAME:latest .
          no_output_timeout: 256m
      - run:
          name: Archive Docker image
          command: docker save -o image.tar $IMAGE_NAME
      - persist_to_workspace:
          root: .
          paths:
            - ./image.tar
  docker-publish-latest:
    executor: docker-executor
    description: Publish latest Docker Image
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load Archived Docker Image
          command: docker load -i /tmp/workspace/image.tar
      - run:
          name: Publish Latest Docker Image
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            docker push $IMAGE_NAME:latest
  docker-publish-tag:
    executor: docker-executor
    description: Publish Tagged Docker Image
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load Archived Docker Image
          command: docker load -i /tmp/workspace/image.tar
      - run:
          name: Publish Tagged Docker Image
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            IMAGE_TAG=${CIRCLE_TAG/v/''}
            docker tag $IMAGE_NAME:latest $IMAGE_NAME:$IMAGE_TAG
            docker push $IMAGE_NAME:latest
            docker push $IMAGE_NAME:$IMAGE_TAG

workflows:
  test-code:
    jobs:
      - prefetch-crates
      - format
      - lint:
          requires:
            - prefetch-crates
      - test:
          requires:
            - prefetch-crates
  security:
    jobs:
      - prefetch-crates
      - security:
          requires:
            - prefetch-crates
  docker:
    jobs:
      - docker-build
      - docker-publish-latest:
          requires:
            - docker-build
          filters:
            branches:
              only: main
      - docker-publish-tag:
          requires:
            - docker-publish-latest
          filters:
            tags:
              only: /^v.*/
            branches:
              only: main
