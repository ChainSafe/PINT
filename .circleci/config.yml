version: 2.1

parameters:
  rustc-version:
    type: string
    default: "1.51.0"

executors:
  test-executor:
    machine:
      image: ubuntu-2004:202010-01
    resource_class: xlarge

######################################################################################################################
#  Reusable single command definitions
######################################################################################################################
commands:
  install_rust:
    description: Install Rust Toolchain
    steps:
      - run:
          name: Install Rust Toolchain
          command: |
            curl -O https://static.rust-lang.org/rustup/dist/x86_64-unknown-linux-gnu/rustup-init && \
            chmod +x rustup-init && \
            ./rustup-init -y --no-modify-path --default-toolchain nightly && \
            rm rustup-init && \
            echo 'export PATH=$HOME/.cargo/bin:$PATH' >> $BASH_ENV && \
            source $BASH_ENV
            rustc --version && \
            cargo --version \
  rust_setup:
    description: Set rustc version
    steps:
      - run:
          name: Set rustc version
          command: rustup default nightly-2021-04-18
  print_versions:
    description: Version Info
    steps:
      - run:
          name: Version Info
          command: rustc --version; cargo --version; rustup --version
  env_setup:
    description: Environment Setup
    steps:
      - run:
          name: Setup Env
          command: |
            echo 'export TAG=0.1.${CIRCLE_BUILD_NUM}' >> $BASH_ENV
            echo 'export IMAGE_NAME=pint' >> $BASH_ENV
            echo 'export CARGO_INCREMENTAL=0' >> $BASH_ENV
            echo 'export CI_TIMEOUT="timeout 40m"' >> $BASH_ENV
            echo 'export CC=gcc' >> $BASH_ENV
  install_deps:
    steps:
      - run:
          name: Install Dependencies
          command: |
            sudo apt-get update
            sudo apt-get install -y git clang curl libssl-dev
            rustup component add clippy rustfmt
  save_cargo_package_cache:
    description: Save cargo package cache for subsequent jobs
    steps:
      - save_cache:
          key: cargo-package-cache-{{ checksum "Cargo.lock" }}
          # paths are relative to /home/circleci/project/
          paths:
            - ../.cargo/git
            - ../.cargo/registry
            - ../.cargo/.package-cache
  restore_cargo_package_cache:
    description: Restore Cargo package cache from prev job
    steps:
      - run:
          name: Print dir
          command: |
            ls -all /usr/local/include
      - restore_cache:
          key: cargo-package-cache-{{ checksum "Cargo.lock" }}
      - run:
          name: Check cargo package cache
          command: |
            ls -all $HOME/.cargo
            du -ssh $HOME/.cargo
  build_setup:
    description: Sets up environment for future jobs
    steps:
      - checkout
      - install_rust
      - rust_setup
      - print_versions
      - env_setup
      - install_deps

jobs:
  prefetch-crates:
    executor: test-executor
    description: Prefetch cargo crates for subsequent jobs.
    steps:
      - build_setup
      - restore_cargo_package_cache
      - run:
          name: Fetch workspace dependencies over network
          command: cargo fetch
      - save_cargo_package_cache

  ######################################################################################################################
  #  Build related jobs
  ######################################################################################################################
  nightly-build-check:
    executor: test-executor
    description: Check nightly build
    steps:
      - checkout
      - install_rust
      - install_deps
      - env_setup
      - run:
          name: Set rustc version
          command: |
            rustup default nightly
            rustup update nightly
      - run:
          name: Nightly Build
          command: |
            rustup run nightly rustc --version --verbose
            rustup run nightly cargo --version --verbose
            cargo +nightly check
            cargo +nightly check

  ######################################################################################################################
  #  Testing, linting
  ######################################################################################################################
  lint:
    executor: test-executor
    description: Run Rust linting tools.
    steps:
      - build_setup
      - restore_cargo_package_cache
      - run:
          name: Check license
          command: make license
      - run:
          name: cargo clippy
          command: cargo clippy -- -D warnings -A clippy::upper_case_acronyms
      - run:
          name: cargo fmt
          command: cargo fmt --all -- --check
  test:
    executor: test-executor
    description: Run Rust tests
    steps:
      - build_setup
      - restore_cargo_package_cache
      - run:
          name: Run Unit Tests
          command: make test

  ######################################################################################################################
  #  Security audit
  ######################################################################################################################
  security:
    executor: test-executor
    description: Cargo audit
    steps:
      - build_setup
      - restore_cargo_package_cache
      - run:
          name: Install dependency auditing tool
          command: cargo install cargo-audit
      - run:
          name: Check for known security issues in dependencies
          # TODO remove ignore when https://github.com/filecoin-project/rust-fil-proofs/issues/1403 resolved
          command: cargo audit --ignore RUSTSEC-2021-0011

workflows:
  setup_test:
    jobs:
      - prefetch-crates
      - lint:
          requires:
            - prefetch-crates
      - test:
          requires:
            - prefetch-crates
  build-check:
    jobs:
      - prefetch-crates
      - nightly-build-check:
          requires:
            - prefetch-crates
  daily-check:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - main
    jobs:
      - prefetch-crates
      - install:
          requires:
            - prefetch-crates

  security:
    jobs:
      - prefetch-crates
      - security:
          requires:
            - prefetch-crates
