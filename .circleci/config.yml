version: 2.1

executors:
  test-executor:
    # resource_class: xlarge
    machine:
      image: ubuntu-2004:202010-01
      docker_layer_caching: true
    environment:
      IMAGE_NAME: chainsafe/pint
      RUSTC_WRAPPER: /home/circleci/.cargo/bin/cargo-audit
      RUSTC_TOOLCHAIN: nightly-2021-04-18
      SCCACHE_CACHE_SIZE: 5G

commands:
  install_deps:
    steps:
      - run:
          name: Substrate Build Dependencies && Sccache
          command: sudo apt-get update && sudo apt-get install -y git clang curl libssl-dev
  install_rust:
    steps:
      - run:
          name: Install Rust
          command: |
            curl https://sh.rustup.rs -sSf | sh -s -- -y \
            --default-toolchain "$RUSTC_TOOLCHAIN" \
            --profile minimal 
  install_cargo_audit:
    description: Install cargo-audit
    steps:
      - run:
          name: Setup CARGO AUDIT
          command: RUSTC_WRAPPER='' cargo install cargo-audit
      - save_cache:
          key: cargo-audit-{{ arch }}
          paths:
            - ../.cargo/bin/cargo-audit
  sccache_setup:
    steps:
      - restore_cache:
          key: sccache-{{ arch }}
      - run: 
          name: Install Sccache
          command: |
            ! -f ${RUSTC_WRAPPER} \
            && url -L https://github.com/mozilla/sccache/releases/download/\
            v0.2.15/sccache-v0.2.15-x86_64-unknown-linux-musl.tar.gz \
            | tar -zxvf - sccache-v0.2.15-x86_64-unknown-linux-musl/sccache \
            && sudo mv sccache-v0.2.15-x86_64-unknown-linux-musl/sccache ${RUSTC_WRAPPER} \
            && sudo chmod +x ${RUSTC_WRAPPER} \
            && sccache -s  
      - save_cache:
          key: sccache-{{ arch }}
          paths:
            - ../.cargo/bin/sccache
  rust_setup:
    description: Setup Rust Toolchain
    parameters:
      feature:
        description: Optional Feature
        type: enum
        enum: [ "sccache", "cargo-audit", "clippy", "rustfmt" ]
        default: "sccache"
    steps:
      - unless:
          condition:
            equal: [ "cargo-audit", << parameters.feature >> ]
          steps:
            - install_rust
      - when:
          condition:
            or:
              - equal: [ "sccache", << parameters.feature >> ]
              - equal: [ "clippy", << parameters.feature >> ]
          steps: 
            - install_deps 
            - sccache_setup
            - run:
                name: Add target wasm32-unknown-unkown
                command: rustup target add wasm32-unknown-unknown
            - restore_cache:
                key: cargo-package-cache-{{ checksum "Cargo.lock" }}
            - checkout
      - when:
          condition:
            equal: [ "clippy", << parameters.feature >> ]
          steps:
            run:
              name: Install rustfmt
              command: rustup component add clippy
      - when:
          condition:
            equal: [ "rustfmt", << parameters.feature >> ]
          steps:
            run:
              name: Install rustfmt
              command: rustup component add rustfmt
      - when:
          condition:
            equal: [ "cargo-audit", << parameters.feature >> ]
          steps:
            - install_rust
            - install_cargo_audit
  save_build_cache:
    description: Save cargo package cache for subsequent jobs
    steps:
      - save_cache:
          key: cargo-package-cache-{{ checksum "Cargo.lock" }}
          paths:
            - ../.cache/sccache
            - ../.cargo/git
            - ../.cargo/registry
            - ../.cargo/.package-cache
  login_dockerhub:
    description: Login DockerHub
    steps:
      - run: 
          name: Login DockerHub
          command: echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
  
jobs:
  format:
    executor: test-executor
    description: format check
    steps:
      - rust_setup:
          feature: "rustfmt"
      - run:
          name: Format check
          command: cargo fmt -- --check
  lint:
    executor: test-executor
    description: Lint Code
    steps:
      - rust_setup:
          feature: "clippy"
      - run:
          name: clippy check
          command: cargo clippy --all-targets
      - save_build_cache
  test:
    executor: test-executor
    description: Run tests
    steps:
      - rust_setup
      - run:
          name: Run Tests
          command: cargo test --all
      - save_build_cache
  security:
    executor: test-executor
    description: Cargo audit
    steps:
      - restore_cache:
          key: cargo-audit-{{ arch }}
      - run:
          name: Check if cargo-audit exists
          command: cargo-audit --version
      - rust_setup:
          feature: "cargo-audit"
      - run:
          name: Check for known security issues in dependencies
          command: cargo audit
  docker-build:
    executor: test-executor
    description: Build Docker Image
    steps:
      - checkout
      - run:
          name: Build docker image
          command: DOCKER_BUILDKIT=1 docker build -t $IMAGE_NAME:latest .
      - run:
          name: Archive Docker image
          command: docker save -o image.tar $IMAGE_NAME
      - persist_to_workspace:
          root: .
          paths:
            - ./image.tar
  docker-publish-latest:
    executor: test-executor
    description: Publish latest Docker Image
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Load Archived Docker Image
          command: docker load -i /tmp/workspace/image.tar
      - login_dockerhub
      - run:
          name: Publish Latest Docker Image
          command: docker push $IMAGE_NAME:latest
  docker-publish-tag:
    executor: test-executor
    description: Publish Tagged Docker Image
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Load Archived Docker Image
          command: docker load -i /tmp/workspace/image.tar
      - login_dockerhub
      - run:
          name: Publish Tagged Docker Image
          command: |
            IMAGE_TAG=${CIRCLE_TAG/v/''}
            docker tag $IMAGE_NAME:latest $IMAGE_NAME:$IMAGE_TAG
            docker push $IMAGE_NAME:latest
            docker push $IMAGE_NAME:$IMAGE_TAG

workflows:
  test-code:
    jobs:
      - format
      - lint
      - test
  security:
    jobs:
      - security

  docker:
    jobs:
      - docker-build
      - docker-publish-latest:
          requires:
            - docker-build
          filters:
            branches:
              only: main
      - docker-publish-tag:
          requires:
            - docker-publish-latest
          filters:
            tags:
              only: /^v.*/
            branches:
              only: main
