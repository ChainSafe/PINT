version: 2.1

executors:
  test-executor:
    # resource_class: xlarge
    machine:
      image: ubuntu-2004:202010-01
      docker_layer_caching: true
    environment:
      IMAGE_NAME: chainsafe/pint
      CARGO_AUDIT: /home/circleci/.cargo/bin/cargo-audit
      RUSTC_WRAPPER: /usr/local/bin/sccache
      RUSTC_TOOLCHAIN: nightly-2021-04-18
      SCCACHE_CACHE_SIZE: 5G

commands:
  rust_setup:
    description: Setup Rust Toolchain
    steps:
      - run:
          name: Setup Rust Toolchain
          command: |
            curl https://sh.rustup.rs -sSf | sh -s -- -y \
            --default-toolchain "$RUSTC_TOOLCHAIN" \
            --target wasm32-unknown-unknown \
            --component clippy rustfmt \
            --profile minimal
      - run:
          name: Install Sccache
          command: |
            curl -L https://github.com/mozilla/sccache/releases/download/\
            v0.2.15/sccache-v0.2.15-x84_64-unknown-linux-musl.tar.gz \
            | tar -zxvf - sccache-v0.2.15-x86_64-unknown-linux-musl/sccache \
            && sudo mv sccache-v0.2.15-x86_64-unknown-linux-musl/sccache /usr/local/bin \
            && sudo chmod +x /usr/local/bin/sccache \
            && sccache -s
  install_deps:
    steps:
      - run:
          name: Substrate Build Dependencies && Sccache
          command: sudo apt-get update && sudo apt-get install -y git clang curl libssl-dev
  build_setup:
    description: Sets up environment for future jobs
    steps:
      - checkout
      - rust_setup
      - install_deps
      - restore_build_cache
      - restore_cache:
          key: sccache-bins
  save_build_cache:
    description: Save cargo package cache for subsequent jobs
    steps:
      - save_cache:
          key: cargo-package-cache-{{ checksum "Cargo.lock" }}
          paths:
            - ../.cache/sccache
            - ../.cargo/git
            - ../.cargo/registry
            - ../.cargo/.package-cache
  restore_build_cache:
    description: Restore Cargo package cache from prev job
    steps:
      - restore_cache:
          keys: 
            - cargo-package-cache-{{ checksum "Cargo.lock" }}
            - sccache-bins
      - run:
          name: Check cargo package cache
          command: |
            ls -all $HOME/.cargo
            du -ssh $HOME/.cargo
  login_dockerhub:
    description: Login DockerHub
    steps:
      - run: 
          name: Login DockerHub
          command: echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
  
jobs:
  prefetch-crates:
    executor: test-executor
    description: Prefetch cargo crates for subsequent jobs.
    steps:
      - build_setup
      - run:
          name: Fetch Dependencies
          command: cargo fetch
      - save_build_cache

  format:
    executor: test-executor
    description: format check
    steps:
      - checkout
      - rust_setup
      - run:
          name: Format check
          command: cargo fmt -- --check
  lint:
    executor: test-executor
    description: Lint Code
    steps:
      - run:
          name: clippy check
          command: cargo clippy --all-targets
      - save_build_cache
  test:
    executor: test-executor
    description: Run tests
    steps:
      - run:
          name: Run Tests
          command: cargo test --all
      - save_build_cache
  security:
    executor: test-executor
    description: Cargo audit
    steps:
      - restore_cache:
          key: cargo-audit-bin
      - run:
          name: Check if cargo-audit exists
          command: cargo-audit --version
      - run:
          name: Setup CARGO AUDIT
          command: cargo install cargo-audit
          when: on_fail
      - save_cache:
          key: cargo-audit-bin
          paths:
            - ../.cargo/bin/cargo-audit
      - run:
          name: Check for known security issues in dependencies
          command: cargo audit
  docker-build:
    executor: test-executor
    description: Build Docker Image
    steps:
      - checkout
      - run:
          name: Build docker image
          command: DOCKER_BUILDKIT=1 docker build -t $IMAGE_NAME:latest .
      - run:
          name: Archive Docker image
          command: docker save -o image.tar $IMAGE_NAME
      - persist_to_workspace:
          root: .
          paths:
            - ./image.tar
  docker-publish-latest:
    executor: test-executor
    description: Publish latest Docker Image
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Load Archived Docker Image
          command: docker load -i /tmp/workspace/image.tar
      - login_dockerhub
      - run:
          name: Publish Latest Docker Image
          command: docker push $IMAGE_NAME:latest
  docker-publish-tag:
    executor: test-executor
    description: Publish Tagged Docker Image
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Load Archived Docker Image
          command: docker load -i /tmp/workspace/image.tar
      - login_dockerhub
      - run:
          name: Publish Tagged Docker Image
          command: |
            IMAGE_TAG=${CIRCLE_TAG/v/''}
            docker tag $IMAGE_NAME:latest $IMAGE_NAME:$IMAGE_TAG
            docker push $IMAGE_NAME:latest
            docker push $IMAGE_NAME:$IMAGE_TAG

workflows:
  test-code:
    jobs:
      - prefetch-crates
      - format
      - lint:
          requires:
            - prefetch-crates
      - test:
          requires:
            - prefetch-crates
  security:
    jobs:
      - prefetch-crates
      - security:
          requires:
            - prefetch-crates
  docker:
    jobs:
      - docker-build
      - docker-publish-latest:
          requires:
            - docker-build
          filters:
            branches:
              only: main
      - docker-publish-tag:
          requires:
            - docker-publish-latest
          filters:
            tags:
              only: /^v.*/
            branches:
              only: main
