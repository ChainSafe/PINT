initSidebarItems({"attr":[["pallet","Macro to define a pallet. Docs are at `frame_support::pallet`."],["require_transactional",""],["transactional","Execute the annotated function in a new storage transaction."]],"derive":[["CloneNoBound","Derive [`Clone`] but do not bound any generic. Docs are at `frame_support::CloneNoBound`."],["DebugNoBound","Derive [`Debug`] but do not bound any generics. Docs are at `frame_support::DebugNoBound`."],["DefaultNoBound","derive `Default` but do no bound any generic. Docs are at `frame_support::DefaultNoBound`."],["EqNoBound","derive Eq but do no bound any generic. Docs are at `frame_support::EqNoBound`."],["PartialEqNoBound","Derive [`PartialEq`] but do not bound any generic. Docs are at `frame_support::PartialEqNoBound`."],["RuntimeDebugNoBound","Derive [`Debug`], if `std` is enabled it uses `frame_support::DebugNoBound`, if `std` is not enabled it just returns `\"<stripped>\"`. This behaviour is useful to prevent bloating the runtime WASM blob from unneeded code."]],"macro":[["__generate_dummy_part_checker","Internal macro use by frame_support to generate dummy part checker for old pallet declaration"],["construct_runtime","Construct a runtime, with the given name and the given pallets."],["crate_to_crate_version",""],["decl_storage","Declares strongly-typed wrappers around codec-compatible types in storage."],["impl_key_prefix_for_tuples","This macro is meant to be used by frame-support only. It implements the trait `HasKeyPrefix` and `HasReversibleKeyPrefix` for tuple of `Key`."],["match_and_insert","Macro that inserts some tokens after the first match of some pattern."]]});