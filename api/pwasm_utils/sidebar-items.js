initSidebarItems({"enum":[["BuildError",""],["OptimizerError",""],["PackingError","Pack error."],["SourceTarget",""],["TargetRuntime",""]],"fn":[["build",""],["export_mutable_globals","Export all declared mutable globals."],["externalize",""],["externalize_mem",""],["graph_generate","Generate parity-wasm `Module`"],["graph_parse","New module from parity-wasm `Module`"],["inject_gas_counter","Transforms a given module into one that charges gas for code to be executed by proxy of an imported gas metering function."],["inject_runtime_type",""],["optimize",""],["pack_instance","If a pwasm module has an exported function matching “create” symbol we want to pack it into “constructor”. `raw_module` is the actual contract code `ctor_module` is the constructor which should return `raw_module`"],["shrink_unknown_stack",""],["underscore_funcs",""],["ununderscore_funcs",""]],"mod":[["rules",""],["stack_height","The pass that tries to make stack overflows deterministic, by introducing an upper bound of the stack size."]],"struct":[["DeleteTransaction","Delete transaction."],["Entry","Reference counting, link-handling object."],["EntryRef","Reference to the entry in the rerence list."],["Module","Module"],["RefList","List that tracks references and indices."],["TargetSymbols",""]]});