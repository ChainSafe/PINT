initSidebarItems({"constant":[["LOWEST_PUBLIC_ID","The ID of the first publicly registerable parachain."],["LOWEST_USER_ID","The ID of the first user (non-system) parachain."]],"enum":[["XcmpMessageFormat","The aggregate XCMP message format."]],"struct":[["BlockData","Parachain block data."],["HeadData","Parachain head data included in the chain."],["HrmpChannelId","A type that uniquely identifies an HRMP channel. An HRMP channel is established between two paras. In text, we use the notation `(A, B)` to specify a channel between A and B. The channels are unidirectional, meaning that `(A, B)` and `(B, A)` refer to different channels. The convention is that we use the first item tuple for the sender and the second for the recipient. Only one channel is allowed between two participants in one direction, i.e. there cannot be 2 different channels identified by `(A, B)`. A channel with the same para id in sender and recipient is invalid. That is, however, not enforced."],["Id","Unique identifier of a parachain."],["Sibling",""],["ValidationCode","Parachain validation code."],["ValidationCodeHash","Unit type wrapper around [`Hash`] that represents a validation code hash."],["ValidationParams","Validation parameters for evaluating the parachain validity function."],["ValidationResult","The result of parachain validation."]],"trait":[["AccountIdConversion","This type can be converted into and possibly from an [`AccountId`] (which itself is generic)."],["DmpMessageHandler","Something that should be called when a downward message is received."],["IsSystem","Determine if a parachain is a system parachain or not."],["XcmpMessageHandler","Something that should be called for each batch of messages received over XCMP."]],"type":[["RelayChainBlockNumber","Block number type used by the relay chain."],["UpwardMessage","A message from a parachain to its Relay Chain."]]});