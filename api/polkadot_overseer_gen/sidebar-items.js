initSidebarItems({"attr":[["overlord",""]],"enum":[["FromOverseer","A message type that a subsystem receives from an overseer. It wraps signals from an overseer and messages that are circulating between subsystems."],["OverseerError","An error type that describes faults that may happen"],["ToOverseer","A type of messages that are sent from [`Subsystem`] to [`Overseer`]."]],"fn":[["make_packet","Create a packet from its parts."]],"struct":[["MessagePacket","A wrapping type for messages."],["SignalsReceived","Watermark to track the received signals."],["SpawnedSubsystem","An asynchronous subsystem task.."],["SubsystemInstance","A running instance of some `Subsystem`."],["SubsystemMeterReadouts","Set of readouts of the `Meter`s of a subsystem."],["SubsystemMeters","Collection of meters related to a subsystem."],["Timeout","A future that wraps another future with a `Delay` allowing for time-limited futures."],["WrongVariant","An error indicating that this the over-arching message type had the wrong variant"]],"trait":[["AnnotateErrorOrigin","A trait to support the origin annotation such that errors across subsystems can be easier tracked."],["MapSubsystem","A helper trait to map a subsystem to smth. else."],["Subsystem","A trait that describes the `Subsystem`s that can run on the `Overseer`."],["SubsystemContext","A context type that is given to the [`Subsystem`] upon spawning. It can be used by [`Subsystem`] to communicate with other [`Subsystem`]s or spawn jobs."],["SubsystemSender","Sender end of a channel to interface with a subsystem."],["TimeoutExt","Extends `Future` to allow time-limited futures."]],"type":[["OverseerResult","Alias for a result with error type `OverseerError`."],["SubsystemIncomingMessages","Incoming messages from both the bounded and unbounded channel."]]});