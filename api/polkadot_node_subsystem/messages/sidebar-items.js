initSidebarItems({"enum":[["AllMessages","Generated message type wrapper"],["ApprovalCheckError","The error result type of [`ApprovalVotingMessage::CheckAndImportApproval`] request."],["ApprovalCheckResult","The result type of [`ApprovalVotingMessage::CheckAndImportApproval`] request."],["ApprovalDistributionMessage","Message to the Approval Distribution subsystem."],["ApprovalVotingMessage","Message to the Approval Voting subsystem."],["AssignmentCheckError","The error result type of [`ApprovalVotingMessage::CheckAndImportAssignment`] request."],["AssignmentCheckResult","The result type of [`ApprovalVotingMessage::CheckAndImportAssignment`] request."],["AvailabilityDistributionMessage","Availability Distribution Message."],["AvailabilityRecoveryMessage","Availability Recovery Message."],["AvailabilityStoreMessage","Availability store subsystem message."],["BitfieldDistributionMessage","Bitfield distribution message."],["BitfieldSigningMessage","Bitfield signing message."],["CandidateBackingMessage","Messages received by the Candidate Backing subsystem."],["CandidateValidationMessage","Messages received by the Validation subsystem."],["ChainApiMessage","Chain API request subsystem message."],["ChainSelectionMessage","Chain selection subsystem messages"],["CollationGenerationMessage","Message to the Collation Generation subsystem."],["CollatorProtocolMessage","Messages received by the Collator Protocol subsystem."],["DisputeCoordinatorMessage","Messages received by the dispute coordinator subsystem."],["DisputeDistributionMessage","Messages going to the dispute distribution subsystem."],["DisputeParticipationMessage","Messages received by the dispute participation subsystem."],["GossipSupportMessage","Message to the Gossip Support subsystem."],["IfDisconnected","When sending a request, what to do on a disconnected recipient."],["ImportStatementsResult","The result of `DisputeCoordinatorMessage::ImportStatements`."],["NetworkBridgeEvent","Events from network."],["NetworkBridgeMessage","Messages received by the network bridge subsystem."],["ProvisionableData","This data becomes intrinsics or extrinsics which should be included in a future relay chain block."],["ProvisionerMessage","Message to the Provisioner."],["RuntimeApiMessage","A message to the Runtime API subsystem."],["RuntimeApiRequest","A request to the Runtime API subsystem."],["StatementDistributionMessage","Statement distribution message."]],"mod":[["network_bridge_event","Network events as transmitted to other subsystems, wrapped in their message types."]],"struct":[["BlockDescription","Describes a relay-chain block by the para-chain candidates it includes."],["HighestApprovedAncestorBlock","Response type to `ApprovalVotingMessage::ApprovedAncestor`."],["ProvisionerInherentData","Inherent data returned by the provisioner"],["ValidationFailed","Blanket error for validation failing for internal reasons."]],"trait":[["BoundToRelayParent","Subsystem messages where each message is always bound to a relay parent."]],"type":[["ChainApiResponseChannel","A response channel for the result of a chain API request."],["RuntimeApiSender","A sender for the result of a runtime API request."]]});