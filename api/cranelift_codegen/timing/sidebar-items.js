initSidebarItems({"fn":[["add_to_current","Add `timings` to the accumulated timings for the current thread."],["binemit","Binary machine code emission"],["canonicalize_nans","Canonicalization of NaNs"],["compile","Compilation passes"],["dce","Dead code elimination"],["domtree","Dominator tree"],["flowgraph","Control flow graph"],["gvn","Global value numbering"],["layout_renumber","Layout full renumbering"],["licm","Loop invariant code motion"],["loop_analysis","Loop analysis"],["parse_text","Parsing textual Cranelift IR"],["preopt","Pre-legalization rewriting"],["process_file","Processing test file"],["regalloc","Register allocation"],["remove_constant_phis","Remove constant phi-nodes"],["take_current","Take the current accumulated pass timings and reset the timings for the current thread."],["unreachable_code","Remove unreachable blocks"],["vcode_emit","VCode emission"],["vcode_emit_finish","VCode emission finalization"],["vcode_lower","VCode lowering"],["vcode_post_ra","VCode post-register allocation finalization"],["verifier","Verify Cranelift IR"],["verify_flags","Verify CPU flags"],["wasm_translate_function","Translate WASM function"],["wasm_translate_module","Translate WASM module"]],"struct":[["PassTimes","Accumulated timing for all passes."],["TimingToken","A timing token is responsible for timing the currently running pass. Timing starts when it is created and ends when it is dropped."]]});