initSidebarItems({"enum":[["Error","Error type for the CLI."],["KeySubcommand","Key utilities for the cli."],["Role","Role of the local node."]],"fn":[["build_runtime","Build a tokio runtime with all features"],["generate_node_name","Generate a valid random name for the node"],["print_node_infos","Log information about the node itself."],["secret_string_from_str","Parse a sercret string, returning a displayable error."]],"macro":[["with_crypto_scheme","Allows for calling $method with appropriate crypto impl."]],"mod":[["arg_enums",""],["utils","subcommand utilities"]],"struct":[["BlockNumberOrHash","Wrapper type that is either a `Hash` or the number of a `Block`."],["BuildSpecCmd","The `build-spec` command used to build a specification."],["CheckBlockCmd","The `check-block` command used to validate blocks."],["CryptoSchemeFlag","Optional flag for specifying crypto algorithm"],["DatabaseParams","Parameters for block import."],["ExecutionStrategiesParams","Execution strategies parameters."],["ExportBlocksCmd","The `export-blocks` command used to export blocks."],["ExportStateCmd","The `export-state` command used to export the state of a given block into a chain spec."],["GenerateCmd","The `generate` command"],["GenerateNodeKeyCmd","The `generate-node-key` command"],["GenericNumber","Wrapper type of `String` that holds an unsigned integer of arbitrary size, formatted as a decimal."],["ImportBlocksCmd","The `import-blocks` command used to import blocks."],["ImportParams","Parameters for block import."],["InsertKeyCmd","The `insert` command"],["InspectKeyCmd","The `inspect` command"],["InspectNodeKeyCmd","The `inspect-node-key` command"],["KeystoreParams","Parameters of the keystore"],["LoggerBuilder","A builder that is used to initialize the global logger."],["NetworkParams","Parameters used to create the network configuration."],["NetworkSchemeFlag","Optional flag for specifying network scheme"],["NodeKeyParams","Parameters used to create the `NodeKeyConfig`, which determines the keypair used for libp2p networking."],["OffchainWorkerParams","Offchain worker related parameters."],["OutputTypeFlag","Optional flag for specifying output type"],["PruningParams","Parameters to define the pruning mode"],["PurgeChainCmd","The `purge-chain` command used to remove the whole chain."],["RevertCmd","The `revert` command used revert the chain to a previous state."],["RunCmd","The `run` command used to run a node."],["Runner","A Substrate CLI runtime that can be used to run a node or a command"],["RuntimeVersion","Runtime version. This should not be thought of as classic Semver (major/minor/tiny). This triplet have different semantics and mis-interpretation could cause problems. In particular: bug fixes should result in an increment of `spec_version` and possibly `authoring_version`, absolutely not `impl_version` since they change the semantics of the runtime."],["SharedParams","Shared parameters used by all `CoreParams`."],["SignCmd","The `sign` command"],["TransactionPoolParams","Parameters used to create the pool configuration."],["VanityCmd","The `vanity` command"],["VerifyCmd","The `verify` command"]],"trait":[["ChainSpec","Common interface of a chain specification."],["CliConfiguration","A trait that allows converting an object to a Configuration"],["DefaultConfigurationValues","Default configuration values used by Substrate"],["SubstrateCli","Substrate client CLI"]],"type":[["Result","Result type alias for the CLI."]]});