(function() {var implementors = {};
implementors["libp2p_swarm"] = [{"text":"impl&lt;TIntoProtoHandler, TProtoHandler&gt; <a class=\"trait\" href=\"libp2p_core/connection/handler/trait.IntoConnectionHandler.html\" title=\"trait libp2p_core::connection::handler::IntoConnectionHandler\">IntoConnectionHandler</a> for <a class=\"struct\" href=\"libp2p_swarm/protocols_handler/struct.NodeHandlerWrapperBuilder.html\" title=\"struct libp2p_swarm::protocols_handler::NodeHandlerWrapperBuilder\">NodeHandlerWrapperBuilder</a>&lt;TIntoProtoHandler&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TIntoProtoHandler: <a class=\"trait\" href=\"libp2p_swarm/protocols_handler/trait.IntoProtocolsHandler.html\" title=\"trait libp2p_swarm::protocols_handler::IntoProtocolsHandler\">IntoProtocolsHandler</a>&lt;Handler = TProtoHandler&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;TProtoHandler: <a class=\"trait\" href=\"libp2p_swarm/protocols_handler/trait.ProtocolsHandler.html\" title=\"trait libp2p_swarm::protocols_handler::ProtocolsHandler\">ProtocolsHandler</a>,&nbsp;</span>","synthetic":false,"types":["libp2p_swarm::protocols_handler::node_handler::NodeHandlerWrapperBuilder"]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()