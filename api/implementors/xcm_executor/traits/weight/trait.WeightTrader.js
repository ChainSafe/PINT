(function() {var implementors = {};
implementors["xcm_builder"] = [{"text":"impl&lt;T:&nbsp;<a class=\"trait\" href=\"frame_support/traits/misc/trait.Get.html\" title=\"trait frame_support::traits::misc::Get\">Get</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.57.0/std/primitive.tuple.html\">(</a><a class=\"struct\" href=\"xcm/v1/multilocation/struct.MultiLocation.html\" title=\"struct xcm::v1::multilocation::MultiLocation\">MultiLocation</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.57.0/std/primitive.u128.html\">u128</a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.57.0/std/primitive.tuple.html\">)</a>&gt;, R:&nbsp;<a class=\"trait\" href=\"xcm_builder/trait.TakeRevenue.html\" title=\"trait xcm_builder::TakeRevenue\">TakeRevenue</a>&gt; <a class=\"trait\" href=\"xcm_executor/traits/weight/trait.WeightTrader.html\" title=\"trait xcm_executor::traits::weight::WeightTrader\">WeightTrader</a> for <a class=\"struct\" href=\"xcm_builder/struct.FixedRateOfConcreteFungible.html\" title=\"struct xcm_builder::FixedRateOfConcreteFungible\">FixedRateOfConcreteFungible</a>&lt;T, R&gt;","synthetic":false,"types":["xcm_builder::weight::FixedRateOfConcreteFungible"]},{"text":"impl&lt;T:&nbsp;<a class=\"trait\" href=\"frame_support/traits/misc/trait.Get.html\" title=\"trait frame_support::traits::misc::Get\">Get</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.57.0/std/primitive.tuple.html\">(</a><a class=\"enum\" href=\"xcm/v1/multiasset/enum.AssetId.html\" title=\"enum xcm::v1::multiasset::AssetId\">AssetId</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.57.0/std/primitive.u128.html\">u128</a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.57.0/std/primitive.tuple.html\">)</a>&gt;, R:&nbsp;<a class=\"trait\" href=\"xcm_builder/trait.TakeRevenue.html\" title=\"trait xcm_builder::TakeRevenue\">TakeRevenue</a>&gt; <a class=\"trait\" href=\"xcm_executor/traits/weight/trait.WeightTrader.html\" title=\"trait xcm_executor::traits::weight::WeightTrader\">WeightTrader</a> for <a class=\"struct\" href=\"xcm_builder/struct.FixedRateOfFungible.html\" title=\"struct xcm_builder::FixedRateOfFungible\">FixedRateOfFungible</a>&lt;T, R&gt;","synthetic":false,"types":["xcm_builder::weight::FixedRateOfFungible"]},{"text":"impl&lt;WeightToFee:&nbsp;<a class=\"trait\" href=\"frame_support/weights/trait.WeightToFeePolynomial.html\" title=\"trait frame_support::weights::WeightToFeePolynomial\">WeightToFeePolynomial</a>&lt;Balance = Currency::<a class=\"type\" href=\"frame_support/traits/tokens/currency/trait.Currency.html#associatedtype.Balance\" title=\"type frame_support::traits::tokens::currency::Currency::Balance\">Balance</a>&gt;, AssetId:&nbsp;<a class=\"trait\" href=\"frame_support/traits/misc/trait.Get.html\" title=\"trait frame_support::traits::misc::Get\">Get</a>&lt;<a class=\"struct\" href=\"xcm/v1/multilocation/struct.MultiLocation.html\" title=\"struct xcm::v1::multilocation::MultiLocation\">MultiLocation</a>&gt;, AccountId, Currency:&nbsp;<a class=\"trait\" href=\"frame_support/traits/tokens/currency/trait.Currency.html\" title=\"trait frame_support::traits::tokens::currency::Currency\">CurrencyT</a>&lt;AccountId&gt;, OnUnbalanced:&nbsp;<a class=\"trait\" href=\"frame_support/traits/tokens/imbalance/on_unbalanced/trait.OnUnbalanced.html\" title=\"trait frame_support::traits::tokens::imbalance::on_unbalanced::OnUnbalanced\">OnUnbalancedT</a>&lt;Currency::<a class=\"type\" href=\"frame_support/traits/tokens/currency/trait.Currency.html#associatedtype.NegativeImbalance\" title=\"type frame_support::traits::tokens::currency::Currency::NegativeImbalance\">NegativeImbalance</a>&gt;&gt; <a class=\"trait\" href=\"xcm_executor/traits/weight/trait.WeightTrader.html\" title=\"trait xcm_executor::traits::weight::WeightTrader\">WeightTrader</a> for <a class=\"struct\" href=\"xcm_builder/struct.UsingComponents.html\" title=\"struct xcm_builder::UsingComponents\">UsingComponents</a>&lt;WeightToFee, AssetId, AccountId, Currency, OnUnbalanced&gt;","synthetic":false,"types":["xcm_builder::weight::UsingComponents"]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()