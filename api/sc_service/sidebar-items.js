initSidebarItems({"constant":[["DEFAULT_GROUP_NAME","Default task group name."]],"enum":[["ChainType","The type of a chain."],["DatabaseSource","Where to find the database.."],["KeepBlocks","Block pruning settings."],["PruningMode","Pruning mode."],["Role","Role of the local node."],["TracingReceiver","Used to configure how to receive the metrics"],["TransactionStorageMode","Block body storage scheme."]],"fn":[["build_network","Build the network service, the network status sinks and an RPC sender."],["build_offchain_workers","Build a shared offchain workers instance."],["new_client","Create an instance of client backed by given backend."],["new_db_backend","Create an instance of default DB-backend backend."],["new_full_client","Creates a new full client for the given config."],["new_full_parts","Create the initial parts of a full node."],["spawn_tasks","Spawn the tasks that are required to run a node."]],"mod":[["chain_ops","Chain utilities."],["config","Service configuration."],["error","Errors that can occur during the service operation."]],"struct":[["BuildNetworkParams","Parameters to pass into `build_network`."],["ClientConfig","Relevant client configuration items relevant for the client."],["GenericChainSpec","A configuration of a chain. Can be used to build a genesis block."],["KeystoreContainer","Construct and hold different layers of Keystore wrappers"],["LocalCallExecutor","Call executor that executes methods locally, querying all required data from local backend."],["NetworkStarter","Object used to start the network."],["NoopRpcExtensionBuilder","A utility struct for implementing an `RpcExtensionBuilder` given a cloneable `RpcExtension`, the resulting builder will simply ignore the provided `DenyUnsafe` instance and return a static `RpcExtension` instance."],["PartialComponents","An incomplete set of chain components, but enough to run the chain ops subcommands."],["RpcHandlers","RPC handlers that can perform RPC queries."],["RpcMetadata","RPC Metadata."],["RpcSession","An RPC session. Used to perform in-memory RPC queries (ie. RPC queries that don’t go through the HTTP or WebSockets server)."],["SpawnTaskHandle","An handle for spawning tasks in the service."],["SpawnTasksParams","Parameters to pass into `build`."],["TaskManager","Helper struct to manage background/async tasks in Service."],["TransactionPoolAdapter","Transaction pool adapter."],["TransactionPoolOptions","Pool configuration options."]],"trait":[["ChainSpec","Common interface of a chain specification."],["ChainSpecExtension","A collection of `ChainSpec` extensions."],["ImportQueue","Blocks import queue API."],["InPoolTransaction","In-pool transaction interface."],["IntoPoolError","Transaction pool error conversion."],["NativeExecutionDispatch","Delegate for dispatching a CodeExecutor call."],["RpcExtensionBuilder","A utility trait for building an RPC extension given a `DenyUnsafe` instance. This is useful since at service definition time we don’t know whether the specific interface where the RPC extension will be exposed is safe or not. This trait allows us to lazily build the RPC extension whenever we bind the service to an interface."],["RuntimeGenesis","A set of traits for the runtime genesis config."],["TransactionPool","Transaction pool interface."]],"type":[["NoExtension","A type denoting empty extensions."],["Properties","Arbitrary properties defined in chain spec as a JSON object"],["TFullBackend","Full client backend type."],["TFullCallExecutor","Full client call executor type."],["TFullClient","Full client type."]]});