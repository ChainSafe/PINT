initSidebarItems({"constant":[["AVERAGE_ON_INITIALIZE_RATIO","We assume that an on-initialize consumes 1% of the weight on average, hence a single extrinsic will not be allowed to consume more than `AvailableBlockRatio - 1%`."],["MAXIMUM_BLOCK_WEIGHT","We allow for 2 seconds of compute with a 6 second average block time."]],"enum":[["BalancesCall","Contains one variant per dispatchable that can be called by an extrinsic."],["StakerStatus","Indicates the initial status of the staker."],["TimestampCall","Contains one variant per dispatchable that can be called by an extrinsic."]],"mod":[["auctions","Auctioning system to determine the set of Parachains in operation. This includes logic for the auctioning mechanism and for reserving balance as part of the “payment”. Unreserving the balance happens elsewhere."],["claims","Pallet to process claims from Ethereum addresses."],["crowdloan","Parachain `Crowdloaning` pallet"],["elections","Code for elections."],["impls","Auxiliary `struct`/`enum`s for polkadot runtime."],["paras_registrar","Pallet to handle parathread/parachain registration and related fund management. In essence this is a simple wrapper around `paras`."],["paras_sudo_wrapper","A simple wrapper allowing `Sudo` to call into `paras` routines."],["purchase","Pallet to process purchase of DOTs."],["slot_range","The `SlotRange` struct which succinctly handles the 36 values that represent all sub ranges between 0 and 7 inclusive."],["slots","Parathread and parachains leasing system. Allows para IDs to be claimed, the code and data to be initialized and parachain slots (i.e. continuous scheduling) to be leased. Also allows for parachains and parathreads to be swapped."],["traits","Traits used across pallets for Polkadot."],["xcm_sender","XCM sender for relay chain."]],"struct":[["AdjustmentVariable","The adjustment variable of the runtime. Higher values will cause `TargetBlockFullness` to change the fees more rapidly."],["AssignmentSessionKeyPlaceholder","A placeholder since there is currently no provided session key handler for parachain validator keys."],["BlockExecutionWeight","Importing a block with 0 txs takes ~5 ms"],["BlockHashCount",""],["BlockLength","Maximum length of block. Up to 5MB."],["BlockWeights","Block weights base values and limits."],["ExtrinsicBaseWeight","Executing 10,000 System remarks (no-op) txs takes ~1.26 seconds -> ~125 µs per tx"],["MinimumMultiplier","Minimum amount of the multiplier. This value cannot be too low. A test case should ensure that combined with `AdjustmentVariable`, we can recover from the minimum. See `multiplier_can_grow_from_zero`."],["ParachainSessionKeyPlaceholder","A placeholder since there is currently no provided session key handler for parachain validator keys."],["RocksDbWeight","By default, Substrate uses RocksDB, so this will be the weight used throughout the runtime."],["TargetBlockFullness","The portion of the `NORMAL_DISPATCH_RATIO` that we adjust the fees with. Blocks filled less than this will decrease the weight and more will increase."]],"trait":[["BuildStorage","Complex storage builder stuff."]],"type":[["CurrencyToVote","The type used for currency conversion."],["NegativeImbalance",""],["SlowAdjustingFeeUpdate","Parameterized slow adjusting fee updated based on https://w3f-research.readthedocs.io/en/latest/polkadot/Token%20Economics.html#-2.-slow-adjusting-mechanism"]]});