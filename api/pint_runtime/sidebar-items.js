initSidebarItems({"constant":[["AVERAGE_ON_INITIALIZE_RATIO","We assume that ~10% of the block weight is consumed by `on_initalize` handlers. This is used to limit the maximal weight of a single extrinsic."],["CENTS",""],["DAYS",""],["DECIMALS",""],["DOLLARS",""],["HOURS",""],["KUSAMA_BONDING_DURATION_IN_BLOCKS",""],["KUSAMA_EPOCH_DURATION_IN_SLOTS",""],["MAXIMUM_BLOCK_WEIGHT","We allow for 0.5 seconds of compute with a 6 second average block time."],["MICROUNIT",""],["MILLICENTS",""],["MILLISECS_PER_BLOCK","This determines the average expected block time that we are targeting. Blocks will be produced at a minimum duration defined by `SLOT_DURATION`. `SLOT_DURATION` is picked up by `pallet_timestamp` which is in turn picked up by `pallet_aura` to implement `fn slot_duration()`."],["MILLIUNIT",""],["MINUTES",""],["NORMAL_DISPATCH_RATIO","We allow `Normal` extrinsics to fill up the block up to 75%, the rest can be used by  Operational  extrinsics."],["POLKADOT_BONDING_DURATION_IN_BLOCKS","28 eras for unbonding (28 days). Six sessions in an era (24 hours)"],["POLKADOT_EPOCH_DURATION_IN_SLOTS",""],["PRIMARY_PROBABILITY",""],["SLOT_DURATION",""],["UNIT",""],["UNITS",""],["VERSION",""],["WASM_BINARY",""],["WASM_BINARY_BLOATY",""],["WEEKS",""],["WEIGHT_PER_SECOND",""]],"enum":[["AssetAvailability","Defines the location of an asset Liquid implies it exists on a chain somewhere in the network and can be moved around SAFT implies the asset is a Simple Agreement for Future Tokens and the promised tokens are not able to be transferred or traded until some time in the future."],["BalancesCall","Contains one variant per dispatchable that can be called by an extrinsic."],["Call",""],["DispatchClass","A generalized group of dispatch types."],["Event",""],["OriginCaller",""],["TimestampCall","Contains one variant per dispatchable that can be called by an extrinsic."]],"fn":[["basic_per_second",""],["dot_per_second",""],["get_all_pallet_accounts",""],["ksm_per_second",""],["native_version","The version information used to identify this runtime when compiled natively."]],"macro":[["construct_runtime","Construct a runtime, with the given name and the given pallets."],["match_type","Create a type which implements the `Contains` trait for a particular type with syntax similar to `matches!`."],["ord_parameter_types","Macro for easily creating a new implementation of both the `Get` and `Contains` traits. Use exactly as with `parameter_types`, only the type must be `Ord`."],["parameter_types","Create new implementations of the `Get` trait."]],"mod":[["api",""],["currency",""],["fee","Fee types used in PINT pallets"],["opaque","Opaque types. These are used by the CLI to instantiate machinery that don’t need to know the specifics of the runtime. They can then be made to be agnostic over specific formats of data like extrinsics, allowing for them to continue syncing the network through upgrades to even the core data structures."],["traits","This contains shared traits that are used in multiple pallets to prevent circular dependencies"],["types","Shareable PINT types"],["weights",""]],"struct":[["AccountId32Convert",""],["Ancestry",""],["AssetIdConvert",""],["AssetPricePair","Defines an asset pair identifier"],["AssetProportion","Represents an asset and its proportion in the value of the index"],["AssetProportions",""],["AssetUnbondingSlashingSpans",""],["BaseWithdrawalFee",""],["BaseXcmWeight",""],["BasicPerSecond",""],["BlockExecutionWeight","Importing a block with 0 txs takes ~5 ms"],["BlockHashCount",""],["Burn",""],["CanEncodeAsset",""],["Days",""],["DisabledValidatorsThreshold",""],["DustRemovalWhitelist",""],["ExistentialDeposit","Same as Polkadot Relay Chain."],["ExistentialDeposits",""],["ExtrinsicBaseWeight","Executing 10,000 System remarks (no-op) txs takes ~1.26 seconds -> ~125 µs per tx"],["FeedLimit",""],["FeedPalletId",""],["GenesisConfig",""],["IdentityFee","Implementor of `WeightToFeePolynomial` that maps one unit of weight to one unit of fee."],["IndexTokenLockIdentifier",""],["IsInVec","Trivial utility for implementing `Contains`/`OrderedMembership` with a `Vec`."],["LockupPeriod",""],["LockupPeriodRange","Range of lockup period"],["MaxActiveDeposits",""],["MaxApprovals",""],["MaxAuthorities",""],["MaxCandidates",""],["MaxDecimals",""],["MaxInstructions",""],["MaxInvulnerables",""],["MaxLocks",""],["MaxScheduledPerBlock",""],["MaximumSchedulerWeight",""],["MinCandidates",""],["MinCouncilMembers",""],["MinCouncilVotes",""],["MinimumBondExtra",""],["MinimumPeriod",""],["MinimumRedemption",""],["MinimumRemoteReserveBalance",""],["MinimumReserve",""],["MinimumStatemintTransferAmount",""],["Offset",""],["OperationalFeeMultiplier",""],["OracleLimit",""],["Origin","The runtime origin type representing the origin of a call."],["PINTAssetId",""],["PalletId","A pallet identifier. These are per pallet and should be stored in a registry somewhere."],["PalletIndexStringLimit",""],["PalletInfo","Provides an implementation of `PalletInfo` to provide information about the pallet setup in the runtime."],["PalletProxyEncoder","The encoder to use when transacting `pallet_proxy` calls"],["PalletStakingEncoder","The encoder to use when transacting `pallet_staking` calls"],["ParentOrParentsUnitPlurality",""],["Perbill","A fixed point representation of a number in the range [0, 1]."],["Period",""],["Permill","A fixed point representation of a number in the range [0, 1]."],["Perquintill","A fixed point representation of a number in the range [0, 1]."],["PintTreasuryAccount",""],["PotId",""],["ProposalBond",""],["ProposalBondMinimum",""],["ProposalSubmissionPeriod",""],["RedemptionFee",""],["RelayChainAssetId",""],["RelayChainOrigin",""],["RelayLocation",""],["RelayNetwork",""],["ReservedDmpWeight",""],["ReservedXcmpWeight",""],["RocksDbWeight","By default, Substrate uses RocksDB, so this will be the weight used throughout the runtime."],["Runtime",""],["RuntimeApi",""],["RuntimeApiImpl","Implements all runtime apis for the client side."],["RuntimeBlockLength",""],["RuntimeBlockWeights",""],["SS58Prefix",""],["SelfLocation",""],["SpendPeriod",""],["StringLimit",""],["ToTreasury",""],["TransactionByteFee",""],["TreasuryPalletId",""],["UncleGenerations",""],["UnitWeightCost",""],["Version",""],["VotingPeriod",""],["VotingPeriodRange","Range of voting period"],["WithdrawalPeriod",""],["XcmConfig",""]],"trait":[["BuildStorage","Complex storage builder stuff."],["Randomness","A trait that is able to provide randomness."],["StorageValue","A trait for working with macro-generated storage values under the substrate storage API."]],"type":[["AccountId","Some way of identifying an account on the chain. We intentionally make it equivalent to the public key of our transaction signing scheme."],["AccountIndex","The type for looking up accounts. We don’t expect more than 4 billion of them, but you never know…"],["AccountPublic",""],["Address","The address format for describing accounts."],["AllModules","All modules included in the runtime as a nested tuple of types. Excludes the System pallet."],["AllModulesWithSystem","All modules included in the runtime as a nested tuple of types."],["AllPallets","All pallets included in the runtime as a nested tuple of types. Excludes the System pallet."],["AllPalletsWithSystem","All pallets included in the runtime as a nested tuple of types."],["Amount","Signed version of Balance"],["AssetId","Identifier for an asset."],["AssetIndex",""],["AssetTxPayment",""],["Aura",""],["AuraConfig",""],["AuraExt",""],["AuraExtConfig",""],["AuraId","An Aura authority identifier using S/R 25519 as its crypto."],["Authorship",""],["Balance","Balance of an account."],["Balances",""],["BalancesConfig",""],["Barrier",""],["Block","Block type as expected by this runtime."],["Block","Block type."],["BlockId","BlockId type as expected by this runtime."],["BlockNumber","An index to a block."],["ChainlinkFeed",""],["ChainlinkFeedConfig",""],["CheckedExtrinsic","Extrinsic type that has already been checked."],["CollatorSelection",""],["CollatorSelectionConfig",""],["Committee",""],["CommitteeConfig",""],["CommitteeOrigin","Origin that approved by committee"],["CumulusXcm",""],["Currencies",""],["DigestItem","Digest item type."],["DmpQueue",""],["Executive","Executive: handles dispatch to the various pallets."],["FeedId","Identifier for price feeds."],["GovernanceOrigin","Origin either `Root` or `CommitteeOrigin`"],["Hash","A hash of some data used by the chain."],["Header","Block header type as expected by this runtime."],["Header","Header type."],["Index","Index of a transaction in the chain."],["LocalAssetTransactor","Means for transacting assets on this chain."],["LocalOriginToLocation",""],["LocalTreasury",""],["LocationToAccountId","Type for specifying how a `MultiLocation` can be converted into an `AccountId`. This is used when determining ownership of accounts for asset transacting and when attempting to use XCM `Transact` in order to determine the dispatch Origin."],["Nonce","Index of a transaction in the chain. 32-bit should be plenty."],["ParachainInfo",""],["ParachainInfoConfig",""],["ParachainSystem",""],["ParachainSystemConfig",""],["PolkadotXcm",""],["PolkadotXcmConfig",""],["Price","The type to represent asset prices"],["PriceFeed",""],["Ratio",""],["RemoteAssetManager",""],["RemoteAssetManagerConfig",""],["RemoteTreasury",""],["SAFTId","Identifier for a SAFT"],["SaftRegistry",""],["Scheduler",""],["Session",""],["SessionConfig",""],["Signature","Alias to 512-bit hash when used in the context of a transaction signature on the chain."],["SignedBlock","A Block signed with a Justification"],["SignedExtra","The SignedExtension to the basic transaction logic."],["Sudo",""],["SudoConfig",""],["System",""],["SystemConfig",""],["Timestamp",""],["Tokens",""],["TokensConfig",""],["TransactionPayment",""],["Treasury",""],["TreasuryConfig",""],["UncheckedExtrinsic","Unchecked extrinsic type as expected by this runtime."],["UnknownTokens",""],["Utility",""],["Value","Value type for price feeds."],["Weight","Numeric range of a transaction weight."],["XTokens",""],["XcmOriginToCallOrigin","This is the type we use to convert an (incoming) XCM origin into a local `Origin` instance, ready for dispatching a transaction with Xcm’s `Transact`. There is an `OriginKind` which can biases the kind of local `Origin` it will become."],["XcmRouter","The means for routing XCM messages which are not for local execution into the right message queues."],["XcmpQueue",""]]});