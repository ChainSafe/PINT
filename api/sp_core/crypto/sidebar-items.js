initSidebarItems({"constant":[["DEV_ADDRESS","The address of the associated root phrase for our publicly known keys."],["DEV_PHRASE","The root phrase for our publicly known keys."],["JUNCTION_ID_LEN","The length of the junction identifier. Note that this is also referred to as the `CHAIN_CODE_LENGTH` in the context of Schnorrkel."]],"derive":[["Zeroize","Trait to zeroize a memory buffer."]],"enum":[["DeriveJunction","A since derivation junction description. It is the single parameter used when creating a new secret key from an existing secret key and, in the case of `SoftRaw` and `SoftIndex` a new public key from an existing public key."],["Infallible","The infallible type."],["PublicError","An error type for SS58 decoding."],["SecretStringError","An error with the interpretation of a secret."],["Ss58AddressFormatRegistry","A known address (sub)format/network ID for SS58."]],"fn":[["default_ss58_version","Returns default ss58 format used by the current active process."],["from_known_address_format","const function to convert [`Ss58AddressFormat`] to u16"],["set_default_ss58_version","Set the default “version” (actually, this is a bit of a misnomer and the version byte is typically used not just to encode format/version but also network identity) that is used for encoding and decoding SS58 addresses."],["unwrap_or_default_ss58_version","Returns either the input address format or the default."]],"mod":[["key_types","Known key types; this also functions as a global registry of key types for projects wishing to avoid collisions with each other."]],"struct":[["AccountId32","An opaque 32-byte cryptographic identifier."],["CryptoTypeId","An identifier for a specific cryptographic algorithm used by a key pair"],["CryptoTypePublicPair","A type alias of CryptoTypeId & a public key"],["Dummy","Dummy cryptography. Doesn’t do anything."],["KeyTypeId","An identifier for a type of cryptographic key."],["Ss58AddressFormat","A custom address format. See also [`Ss58AddressFormatRegistry`]"]],"trait":[["CryptoType","Type which has a particular kind of crypto associated with it."],["Derive","Derivable key trait."],["ExposeSecret","Trait for accessing reference to `SecretString`."],["IsWrappedBy","One type is wrapped by another."],["Pair","Trait suitable for typical cryptographic PKI key pair type."],["Public","Trait suitable for typical cryptographic PKI key public type."],["Ss58Codec","Key that can be encoded to/from SS58."],["UncheckedFrom","Similar to `From`, except that the onus is on the part of the caller to ensure that data passed in makes sense. Basically, you’re not guaranteed to get anything sensible out."],["UncheckedInto","The counterpart to `UncheckedFrom`."],["Wraps","Opposite of `IsWrappedBy` - denotes a type which is a simple wrapper around another type."],["Zeroize","Trait to zeroize a memory buffer."]],"type":[["SecretString","A store for sensitive data."]]});