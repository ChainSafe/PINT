initSidebarItems({"constant":[["MAX_POSSIBLE_ALLOCATION","The maximum number of bytes that can be allocated at one time."]],"derive":[["RuntimeDebug",""]],"enum":[["ExecutionContext","Context for executing a call into the runtime."],["LogLevel","A log level matching the one from `log` crate."],["LogLevelFilter","Log level filter that expresses which log levels should be filtered."],["NativeOrEncoded","Something that is either a native or an encoded value."],["NeverNativeValue","A value that is never in a native representation. This is type is useful in conjunction with `NativeOrEncoded`."],["Void","The void type - it cannot exist."]],"fn":[["blake2_128","Do a Blake2 128-bit hash and return result."],["blake2_256","Do a Blake2 256-bit hash and return result."],["keccak_256","Do a keccak 256-bit hash and return result."],["twox_128","Do a XX 128-bit hash and return result."],["twox_256","Do a XX 256-bit hash and return result."],["twox_64","Do a XX 64-bit hash and return result."]],"macro":[["impl_maybe_marker","Macro for creating `Maybe*` marker traits."],["map","Initialize a key-value collection from array."],["wasm_export_functions","Macro for exporting functions from wasm in with the expected signature for using it with the wasm executor. This is useful for tests where you need to call a function in wasm."]],"mod":[["crypto","Cryptographic utilities."],["ecdsa","Simple ECDSA API."],["ed25519","Simple Ed25519 API."],["hash","A fixed hash type."],["hashing","Hashing functions."],["hexdisplay","Wrapper type for byte collections that outputs hex."],["offchain","Offchain workers types"],["sandbox","Definition of a sandbox environment."],["sr25519","Simple sr25519 (Schnorr-Ristretto) API."],["testing","Types that should only be used for testing!"],["traits","Shareable Substrate traits."],["u32_trait","An u32 trait with “values” as impl’d types."],["uint","An unsigned fixed-size integer."]],"struct":[["Blake2Hasher","Concrete implementation of Hasher using Blake2b 256-bit hashes"],["Bytes","Hex-serialized shim for `Vec<u8>`."],["H160","Fixed-size uninterpreted hash type with 20 bytes (160 bits) size."],["H256","Fixed-size uninterpreted hash type with 32 bytes (256 bits) size."],["H512","Fixed-size uninterpreted hash type with 64 bytes (512 bits) size."],["KeccakHasher","Concrete implementation of Hasher using Keccak 256-bit hashes"],["OpaqueMetadata","Stores the encoded `RuntimeMetadata` for the native side as opaque type."],["OpaquePeerId","Simple blob to hold a `PeerId` without committing to its format."],["U256","Little-endian large integer type"],["U512","Little-endian large integer type"]],"trait":[["Hasher","Trait describing an object that can hash a slice of bytes. Used to abstract other types over the hashing algorithm. Defines a single `hash` method and an `Out` associated type with the necessary bounds."],["TypeId","Provide a simple 4 byte identifier for a type."]]});