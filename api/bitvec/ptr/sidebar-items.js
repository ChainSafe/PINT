initSidebarItems({"enum":[["AddressError","An error produced when consuming `BitStore` memory addresses."],["BitPtrError","Errors produced by invalid bit-pointer components."],["BitSpanError","An error produced when creating `BitSpan` encoded references."]],"fn":[["bitslice_from_raw_parts","Forms a raw bit-slice from a bit-pointer and a length."],["bitslice_from_raw_parts_mut","Performs the same functionality as `bitslice_from_raw_parts`, except that a raw mutable bit-slice is returned, as opposed to a raw immutable bit-slice."],["copy","Copies `count` bits from `src` to `dst`. The source and destination may overlap."],["copy_nonoverlapping","Copies `count` bits from `src` to `dst`. The source and destination must not overlap."],["eq","Compares raw bit-pointers for equality."],["hash","Hash a raw bit-pointer."],["read","Reads the bit from `src`."],["read_volatile","Performs a volatile read of the bit from `src`."],["replace","Moves `src` into the pointed `dst`, returning the previous `dst` bit."],["swap","Swaps the values at two mutable locations."],["swap_nonoverlapping","Swaps `count` bits between the two regions of memory beginning at `x` and `y`. The two regions must not overlap."],["write","Overwrites a memory location with the given bit."],["write_volatile","Performs a volatile write of a memory location with the given bit."]],"struct":[["Address","A non-null, well-aligned, `BitStore` element address."],["BitPtr","Pointer to an individual bit in a memory element. Analagous to `*bool`."],["BitPtrRange","Equivalent to `Range<BitPtr<M, O, T>>`."],["BitRef","A proxy reference, equivalent to C++ `std::bitset<N>::reference`."],["Const","An immutable pointer."],["Mut","A mutable pointer. Contexts with a `Mutable` may lower to `Immutable`, then re-raise to `Mutable`; contexts with `Immutable` may not raise to `Mutable` on their own."]]});