initSidebarItems({"enum":[["BlockOrigin","Block data origin."],["BlockStatus","Block status."]],"mod":[["block_validation","Block announcement validation."],["error","Error types in Consensus"],["evaluation","Block evaluation and evaluation errors."]],"struct":[["AlwaysCanAuthor","Returns always `true` for `can_author_with`. This is useful for tests."],["CanAuthorWithNativeVersion","Checks if the node can author blocks by using `NativeVersion::can_author_with`."],["DisableProofRecording","Express that proof recording is disabled."],["EnableProofRecording","Express that proof recording is enabled."],["InherentData","Inherent data to include in a block."],["NeverCanAuthor","Never can author."],["NoNetwork","A synchronization oracle for when there is no network."],["NoProofRecorded","Error that is returned when [`ProofRecording`] requested to record a proof, but no proof was recorded."],["Proposal","A proposal that is created by a [`Proposer`]."]],"trait":[["CanAuthorWith","Checks if the current active native block authoring implementation can author with the runtime at the given block."],["Environment","Environment for a Consensus instance."],["ProofRecording","A trait to express the state of proof recording on type system level."],["Proposer","Logic for a proposer."],["SelectChain","The SelectChain trait defines the strategy upon which the head is chosen if multiple forks are present for an opaque definition of “best” in the specific chain build."],["SlotData","A type from which a slot duration can be obtained."],["StateBackend","A state backend is used to read state data and can have changes committed to it."],["SyncOracle","An oracle for when major synchronization work is being undertaken."]],"type":[["CacheKeyId","Type of keys in the blockchain cache that consensus module could use for its needs."]]});