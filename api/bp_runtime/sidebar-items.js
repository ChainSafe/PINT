initSidebarItems({"constant":[["ACCOUNT_DERIVATION_PREFIX","A unique prefix for entropy when generating cross-chain account IDs."],["CALL_DISPATCH_MODULE_PREFIX","Call-dispatch module prefix."],["KUSAMA_CHAIN_ID","Bridge-with-Kusama instance id."],["MILLAU_CHAIN_ID","Bridge-with-Millau instance id."],["NO_INSTANCE_ID","Use this when something must be shared among all instances."],["POLKADOT_CHAIN_ID","Bridge-with-Polkadot instance id."],["RIALTO_CHAIN_ID","Bridge-with-Rialto instance id."],["ROCOCO_CHAIN_ID","Bridge-with-Rococo instance id."],["ROOT_ACCOUNT_DERIVATION_PREFIX","A unique prefix for entropy when generating a cross-chain account ID for the Root account."],["WOCOCO_CHAIN_ID","Bridge-with-Wococo instance id."]],"enum":[["SourceAccount","Type of accounts on the source chain."],["StorageProofError",""]],"fn":[["craft_valid_storage_proof","Return valid storage proof and state root."],["derive_account_id","Derive an account ID from a foreign account ID."],["derive_relayer_fund_account_id","Derive the account ID of the shared relayer fund account."]],"mod":[["messages","Primitives that may be used by different message delivery and dispatch mechanisms."]],"struct":[["PreComputedSize","Pre-computed size."],["StorageProofChecker","This struct is used to read storage values from a subset of a Merklized database. The “proof” is a subset of the nodes in the Merkle structure of the database, so that it provides authentication against a known Merkle root as well as the values in the database themselves."]],"trait":[["Chain","Minimal Substrate-based chain representation that may be used from no_std environment."],["Size","Anything that has size."]],"type":[["BlockNumberOf","Block number used by the chain."],["ChainId","Unique identifier of the chain."],["HashOf","Hash type used by the chain."],["HasherOf","Hasher type used by the chain."],["HeaderOf","Header type used by the chain."]]});