initSidebarItems({"derive":[["TypeInfo",""]],"enum":[["PathError","An error that may be encountered upon constructing namespaces."],["TypeDef","The possible types a SCALE encodable Rust value could have."],["TypeDefPrimitive","A primitive Rust type."]],"fn":[["meta_type","Returns the runtime bridge to the types compile-time type information."]],"macro":[["named_type_params","Construct a vector of `TypeParameter`s from pairs of the name and the concrete type."],["tuple_meta_type","Takes a number of types and returns a vector that contains their respective `MetaType` instances."],["type_params","Construct a vector of [`TypeParameter`] instances with the name of the type parameter, together with its concrete [`MetaType`]."]],"mod":[["build","Builders for defining metadata for variant types (enums), and composite types (structs). They are designed to allow only construction of valid definitions."],["form","Provides form definitions."],["interner","Interning data structure and associated symbol definitions."],["prelude","Exports from `std`, `core` and `alloc` crates."]],"struct":[["Field","A field of a struct-like data type."],["MetaType","A metatype abstraction."],["Path","Represents the path of a type definition."],["PortableRegistry","A read-only registry containing types in their portable form for serialization."],["Registry","The registry for space-efficient storage of type identifiers and definitions."],["Type","A [`Type`] definition with optional metadata."],["TypeDefArray","An array type."],["TypeDefBitSequence","Type describing a [`bitvec::vec::BitVec`]."],["TypeDefCompact","A type wrapped in [`Compact`]."],["TypeDefComposite","A composite type, consisting of either named (struct) or unnamed (tuple struct) fields"],["TypeDefSequence","A type to refer to a sequence of elements of the same type."],["TypeDefTuple","A type to refer to tuple types."],["TypeDefVariant","A Enum type (consisting of variants)."],["TypeParameter","A generic type parameter."],["Variant","A struct enum variant with either named (struct) or unnamed (tuple struct) fields."]],"trait":[["IntoPortable","Convert the type definition into the portable form using a registry."],["StaticTypeInfo","Convenience trait for implementors, combining `TypeInfo` and `'static` bounds."],["TypeInfo","Implementors return their meta type information."]]});