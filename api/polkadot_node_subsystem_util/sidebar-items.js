initSidebarItems({"constant":[["JOB_CHANNEL_CAPACITY","Capacity of channels to and from individual jobs"],["JOB_GRACEFUL_STOP_DURATION","Duration a job will wait after sending a stop signal before hard-aborting."],["MIN_GOSSIP_PEERS","The minimum amount of peers to send gossip messages to."]],"enum":[["Error","Utility errors"],["FromJobCommand","Commands from a job to the broader subsystem."],["JobsError","Error which can be returned by the jobs manager"],["OverseerError","An error type that describes faults that may happen"]],"fn":[["choose_random_subset","Choose a random subset of `min` elements. But always include `is_priority` elements."],["determine_new_blocks","Given a new chain-head hash, this determines the hashes of all new blocks we should track metadata for, given this head."],["find_validator_group","Find the validator group the given validator index belongs to."],["gen_ratio","Returns a `bool` with a probability of `a / b` of being true."],["request_assumed_validation_data","Request `AssumedValidationData` from the runtime"],["request_authorities","Request `Authorities` from the runtime"],["request_availability_cores","Request `AvailabilityCores` from the runtime"],["request_candidate_events","Request `CandidateEvents` from the runtime"],["request_candidate_pending_availability","Request `CandidatePendingAvailability` from the runtime"],["request_from_runtime","Request some data from the `RuntimeApi`."],["request_persisted_validation_data","Request `PersistedValidationData` from the runtime"],["request_session_index_for_child","Request `SessionIndexForChild` from the runtime"],["request_session_info","Request `SessionInfo` from the runtime"],["request_validation_code","Request `ValidationCode` from the runtime"],["request_validator_groups","Request `ValidatorGroups` from the runtime"],["request_validators","Request `Validators` from the runtime"],["signing_key","From the given set of validators, find the first key we can sign with, if any."],["signing_key_and_index","From the given set of validators, find the first key we can sign with, if any, and return it along with the validator index."]],"mod":[["metrics","This module reexports Prometheus types and defines the [`Metrics`] trait."],["reexports","These reexports are required so that external crates can use the `delegated_subsystem` macro properly."],["rolling_session_window","A rolling session window cache. A rolling window of sessions and cached session info, updated by the state of newly imported blocks."],["runtime","Convenient and efficient runtime info access. Convenient interface to runtime information."]],"struct":[["JobSender","A sender for messages from jobs, as well as commands to the overseer."],["JobSubsystem","A subsystem which wraps jobs."],["Metronome","Create a stream of ticks with a defined cycle duration."],["Timeout","A future that wraps another future with a `Delay` allowing for time-limited futures."],["Validator","Local validator information"]],"trait":[["JobTrait","This trait governs jobs."],["Subsystem","A trait that describes the `Subsystem`s that can run on the `Overseer`."],["TimeoutExt","Extends `Future` to allow time-limited futures."]],"type":[["RuntimeApiReceiver","A type alias for Runtime API receivers."]]});