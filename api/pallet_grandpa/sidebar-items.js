initSidebarItems({"enum":[["StoredState","Current state of the GRANDPA authority set. State transitions must happen in the same order of states defined below, e.g. `Paused` implies a prior `PendingPause`."]],"mod":[["migrations",""],["pallet","The module that hosts all the FRAME types needed to add this pallet to a runtime."]],"struct":[["EquivocationHandler","Generic equivocation handler. This type implements `HandleEquivocation` using existing subsystems that are part of frame (type bounds described below) and will dispatch to them directly, itâ€™s only purpose is to wire all subsystems together."],["GrandpaEquivocationOffence","A grandpa equivocation offence report."],["GrandpaTimeSlot","A round number and set id which point on the time of an offence."],["StoredPendingChange","A stored pending change. `Limit` is the bound for `next_authorities`"],["VersionedAuthorityList","An AuthorityList that is encoded with a version specifier. The encoding version is updated any time the AuthorityList type changes. This ensures that encodings of different versions of an AuthorityList are differentiable. Attempting to decode an authority list with an unknown version will fail."]],"trait":[["GrandpaOffence","An interface for types that will be used as GRANDPA offences and must also implement the `Offence` trait. This trait provides a constructor that is provided all available data during processing of GRANDPA equivocations."],["HandleEquivocation","A trait with utility methods for handling equivocation reports in GRANDPA. The offence type is generic, and the trait provides , reporting an offence triggered by a valid equivocation report, and also for creating and submitting equivocation report extrinsics (useful only in offchain context)."],["WeightInfo",""]],"type":[["AuthorityId","Identity of a Grandpa authority."],["AuthorityList","A list of Grandpa authorities with associated weights."],["AuthorityWeight","The weight of an authority."],["BoundedAuthorityList","Bounded version of `AuthorityList`, `Limit` being the bound"]]});