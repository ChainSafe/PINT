initSidebarItems({"derive":[["CloneNoBound","Derive [`Clone`] but do not bound any generic. Docs are at `frame_support::CloneNoBound`."],["DebugNoBound","Derive [`Debug`] but do not bound any generics. Docs are at `frame_support::DebugNoBound`."],["Decode","Derive `parity_scale_codec::Decode` and for struct and enum."],["Encode","Derive `parity_scale_codec::Encode` and `parity_scale_codec::EncodeLike` for struct and enum."],["EqNoBound","derive Eq but do no bound any generic. Docs are at `frame_support::EqNoBound`."],["MaxEncodedLen","Derive `MaxEncodedLen`."],["PartialEqNoBound","Derive [`PartialEq`] but do not bound any generic. Docs are at `frame_support::PartialEqNoBound`."],["RuntimeDebug",""],["RuntimeDebugNoBound","Derive [`Debug`], if `std` is enabled it uses `frame_support::DebugNoBound`, if `std` is not enabled it just returns `\"<stripped>\"`. This behaviour is useful to prevent bloating the runtime WASM blob from unneeded code."],["TypeInfo",""]],"enum":[["DispatchError","Reason why a dispatch call failed."],["InvalidTransaction","An invalid transaction validity."],["TransactionSource","The source of the transaction."],["TransactionValidityError","Errors that can occur while checking the validity of a transaction."],["UnknownTransaction","An unknown transaction validity."]],"struct":[["Blake2_128","Hash storage keys with blake2 128"],["Blake2_128Concat","Hash storage keys with `concat(blake2_128(key), key)`"],["Blake2_256","Hash storage keys with blake2 256"],["ConstU32","Implement `Get<u32>` and `Get<Option<u32>>` using the given const."],["CountedStorageMap","A wrapper around a `StorageMap` and a `StorageValue<Value=u32>` to keep track of how many items are in a map, without needing to iterate all the values."],["GetDefault","Implement Get by returning Default for any type that implements Default."],["Identity","Store the key directly."],["InherentData","Inherent data to include in a block."],["NMapKey","A type used exclusively by storage maps as their key type."],["PhantomData","Zero-sized type used to mark things that “act like” they own a `T`."],["StorageDoubleMap","A type that allow to store values for `(key1, key2)` couple. Similar to `StorageMap` but allow to iterate and remove value associated to first key."],["StorageMap","A type that allow to store value for given key. Allowing to insert/remove/iterate on values."],["StorageNMap","A type that allow to store values for an arbitrary number of keys in the form of `(Key<Hasher1, key1>, Key<Hasher2, key2>, ..., Key<HasherN, keyN>)`."],["StorageValue","A type that allow to store a value."],["Twox128","Hash storage keys with twox 128"],["Twox256","Hash storage keys with twox 256"],["Twox64Concat","Hash storage keys with `concat(twox64(key), key)`"],["ValidTransaction","Information concerning a valid transaction."]],"trait":[["Decode","Trait that allows zero-copy read of value-references from slices in LE format."],["Encode","Trait that allows zero-copy write of value-references to slices in LE format."],["EnsureOrigin","Some sort of check on the origin is performed by this object."],["GenesisBuild","A trait to define the build function of a genesis config, T and I are placeholder for pallet trait and pallet instance."],["Get","A trait for querying a single value from a type."],["GetStorageVersion","Provides information about the storage version of a pallet."],["Hooks","The pallet hooks trait. Implementing this lets you express some logic to execute."],["IsType","Trait to be used when types are exactly same."],["MaxEncodedLen","Items implementing `MaxEncodedLen` have a statically known maximum encoded size."],["MaybeSerializeDeserialize","A type that implements Serialize, DeserializeOwned and Debug when in std environment."],["Member","A type that can be used in runtime structures."],["PalletInfoAccess","Provides information about the pallet itself and its setup in the runtime."],["StorageInfoTrait","A trait to give information about storage."],["TypeInfo","Implementors return their meta type information."],["ValidateUnsigned","Something that can validate unsigned extrinsics for the transaction pool."]],"type":[["InherentIdentifier","An identifier for an inherent."],["TransactionLongevity","Minimum number of blocks a transaction will remain valid for. `TransactionLongevity::max_value()` means “forever”."],["TransactionPriority","Priority for a transaction. Additive. Higher is better."],["TransactionTag","Tag for a transaction. No two transactions with the same tag should be placed on-chain."],["TransactionValidity","Information on a transaction’s validity and, if valid, on how it relates to other transactions."]]});