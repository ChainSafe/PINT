// Copyright 2021 ChainSafe Systems
// SPDX-License-Identifier: LGPL-3.0-only

//! Autogenerated weights for `pallet_saft_registry`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2021-09-03, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("pint-local"), DB CACHE: 128

// Executed Command:
// ./target/release/pint
// benchmark
// -p
// pallet_saft_registry
// -e
// *
// --execution
// wasm
// --wasm-execution
// compiled
// --raw
// --chain
// pint-local
// --output
// ./runtime/common/src/weights/pallet_saft_registry.rs
// --steps
// 50
// --repeat
// 20
// --heap-pages
// 4096


#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for pallet_saft_registry.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_saft_registry::WeightInfo for WeightInfo<T> {
	// Storage: AssetIndex Assets (r:3 w:1)
	// Storage: SaftRegistry SAFTNetAssetValue (r:1 w:1)
	// Storage: Tokens Accounts (r:2 w:1)
	// Storage: PriceFeed AssetFeeds (r:1 w:0)
	// Storage: ChainlinkFeed Feeds (r:1 w:0)
	// Storage: ChainlinkFeed Rounds (r:1 w:0)
	// Storage: Tokens TotalIssuance (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	// Storage: SaftRegistry SAFTCounter (r:1 w:1)
	// Storage: SaftRegistry ActiveSAFTs (r:0 w:1)
	fn add_saft() -> Weight {
		(105_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(13 as Weight))
			.saturating_add(T::DbWeight::get().writes(8 as Weight))
	}
	// Storage: SaftRegistry ActiveSAFTs (r:1 w:1)
	// Storage: AssetIndex Assets (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Tokens Accounts (r:1 w:1)
	// Storage: Tokens TotalIssuance (r:1 w:1)
	// Storage: SaftRegistry SAFTNetAssetValue (r:1 w:1)
	fn remove_saft() -> Weight {
		(64_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
	}
	// Storage: SaftRegistry ActiveSAFTs (r:1 w:1)
	// Storage: SaftRegistry SAFTNetAssetValue (r:1 w:1)
	fn report_nav() -> Weight {
		(23_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: AssetIndex Assets (r:1 w:1)
	// Storage: SaftRegistry SAFTNetAssetValue (r:1 w:1)
	// Storage: SaftRegistry SAFTCounter (r:1 w:1)
	// Storage: SaftRegistry ActiveSAFTs (r:1 w:1)
	fn convert_to_liquid(o: u32, ) -> Weight {
		(27_405_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((3_263_000 as Weight).saturating_mul(o as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(o as Weight)))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
}
